//Print that we are loading
print("loading Movable towers...");

//Create basic variables
//The := operator is like the = in any other language, except for classes & structs.
var movable_game := getGame();
var movable_input := movable_game.getWinInput();
var movable_ptrs := movable_game.getCGameSystemPointers();
var movable_towerManager := movable_ptrs.getCTowerManager();


//Make our variables global so that they can be accessed on any thread
//We need to do this because onKey and forEachTower run on the game's thread
add_global(movable_game, "movable_game")
add_global(movable_input, "movable_input")
add_global(movable_ptrs, "movable_ptrs")
add_global(movable_towerManager, "movable_towerManager")


//Create a variable for if we are moving towers
//The global version of "mov" is "moving" and so we want to use "moving" instead of "mov" now
var mov = 0
add_global(mov, "moving")
//onKey is a function that calls any given function inside whenever the game receives a key press.
onKey(fun(key)
{
	//Capital letters mean shift + the letter need to be pressed
	//Caps lock also works
	//You can use "if(key=='D'||key=='d')" to ignore casing
	if(key=='D')
	{
		//Adds 1 to moving (aka "mov" as defined above)
		moving = moving + 1
	}
});

//Let user know our plugin finished loading
print("Movable Towers loaded!")


//Main loop for our plugin
//Plugins run on their own threads, so this wont cause the game to stop
//Running a while(true) loop in a game thread (such as onKey) *will* cause the game to freeze
while(true)
{
	//Sleep 10 milliseconds to not take up a shit ton of cpu
	Sleep(10)
	//If moving is an even number
	//This way the moving can be toggled by the key press
	if(even(moving))
	{
		//Loop through all of the towers
		//fun(x){} creates a new function, this function needs to take a tower as a parameter
		//This will run the code for all of the towers placed down
		movable_towerManager.forEachTower(fun(tower)
		{
			//If the tower is selected
			if(tower.isSelected())
			{
				//create a var for the tower position and mouse position
				var towerPos := movable_tower.getPosition();
				var mousePos := movable_input.getMousePos();
				
				
				//Set the positions
				towerPos.setX(mousePos.getX());
				towerPos.setY(mousePos.getY());
			}
		});
	}
}